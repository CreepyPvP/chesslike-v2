use crate::{AppState, types::GameAssets, assets::types::TiledMap};
use bevy::prelude::*;

#[derive(SystemSet, Debug, Clone, Copy, Eq, PartialEq, Hash)]
enum GameSystemSets {
    Start,
    Input,
}

pub struct GamePlugin;

impl Plugin for GamePlugin {
    fn build(&self, app: &mut bevy::prelude::App) {
        app.configure_set(GameSystemSets::Start);
        app.configure_set(GameSystemSets::Input);

        app.add_systems((
            create_map
                .in_schedule(OnEnter(AppState::Game))
                .in_set(GameSystemSets::Start),
            destroy_map.in_schedule(OnExit(AppState::Game)),
        ));
    }
}

#[derive(Component)]
struct Map;

fn create_map(mut commands: Commands, game_assets: Res<GameAssets>, tilemaps: Res<Assets<TiledMap>>) {
    let tiles: Vec<Entity> = vec!();
    for layer in &tilemaps.get(&game_assets.map).unwrap().layers {
        for x in 0..layer.width {
            for y in 0..layer.height {
                let id = layer.data[(x + y * layer.width) as usize] as usize;
                if id == 0 {
                    continue;
                }
                let tile = commands.spawn((
                    SpriteBundle {
                        texture: game_assets.tiles[id - 1].clone(),
                        ..default()
                    }
                )).id();
                map.add_child(tile);
            }
        }
    }
}

fn destroy_map(mut command: Commands, query: Query<Entity, With<Map>>) {
    if let Ok(map_entity) = query.get_single() {
        command.entity(map_entity).despawn_recursive();
    }
}
